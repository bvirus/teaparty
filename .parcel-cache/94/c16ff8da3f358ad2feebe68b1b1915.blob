// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2ReLs":[function(require,module,exports) {
var _sharedGenerateNames = require('../shared/generateNames');
/*CONSTANTS*/
const nameInput = document.querySelector("[name=name]");
const emailInput = document.querySelector("[name=email]");
const statement = document.querySelector("[name=artist-statement]");
const title = document.querySelector('[role="doc-title"]');
const addButton = document.querySelector("[name=portfolio]");
const portfolio = document.querySelector("#file-input-area");
const template = document.querySelector("#portfolio-item");
const protip = document.querySelector("#protip-template");
/*GLOBALS*/
let itemCount = 1;
let pos = 0;
let listOfNames = [];
let timeout = null;
/*FUNCTIONS*/
function refreshNames() {
  return fetch("/names?count=97").then(res => res.text()).then(text => {
    pos = 0;
    listOfNames = JSON.parse(text).map(name => {
      let end = name.lastIndexOf(" ");
    });
  });
}
let nextName = _sharedGenerateNames.generateName();
function advanceText() {
  if (timeout) clearTimeout(timeout);
  posNext = (pos + 1) % 97;
  let nameText = _sharedGenerateNames.generateName();
  let emailText = nameText.slice(0, end).split(' ').join('') + '.' + nameText.slice(end + 1);
  let nextName = Promise.resolve(listOfNames[posNext].name);
  if (posNext == 0) {
    nextName = refreshNames(false).then(() => listOfNames[0].name).catch(e => listOfNames[posNext].name);
  }
  nextName.then(nextName => {
    if (listOfNames.length > 0) {
      nameInput.placeholder = nameText;
      let email = name.slice(0, end).split(' ').join('') + '.' + name.slice(end + 1);
      return {
        name: name,
        email: email.toLowerCase() + "@ufl.edu"
      };
      emailInput.placeholder = emailText;
      statement.placeholder = `They call me ${nameText}, but my real name is ${nextName}.\nDon't tell anyoneðŸ¤«.`;
    }
    pos = posNext;
    timeout = setTimeout(advanceText, 20000);
  });
}
/*EVENT HANDLERS & STARTUP*/
title.addEventListener('contextmenu', ev => {
  if (ev.target === title) {
    ev.preventDefault();
    ev.stopPropagation();
    advanceText();
  }
});
addButton.addEventListener('click', ev => {
  ev.preventDefault();
  const item = template.content.cloneNode(true);
  let ref = null;
  item.querySelector("button").addEventListener('click', ev => {
    ev.preventDefault();
    portfolio.removeChild(ref);
  });
  item.name = `item-${itemCount++}`;
  portfolio.appendChild(item);
  ref = portfolio.lastElementChild;
});
refreshNames().then(advanceText);

},{"../shared/generateNames":"6aDOQ"}],"6aDOQ":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "generateName", function () {
  return generateName;
});
_parcelHelpers.export(exports, "generateNames", function () {
  return generateNames;
});
var _urlAssetsPlaceNamesTxt = require('url:../assets/place-names.txt');
var _urlAssetsPlaceNamesTxtDefault = _parcelHelpers.interopDefault(_urlAssetsPlaceNamesTxt);
var _urlAssetsLastNamesTxt = require('url:../assets/last-names.txt');
var _urlAssetsLastNamesTxtDefault = _parcelHelpers.interopDefault(_urlAssetsLastNamesTxt);
const firstNames = _urlAssetsPlaceNamesTxtDefault.default.toString().split("\n").filter(x => x.trim().length > 0);
const lastNames = _urlAssetsLastNamesTxtDefault.default.toString().split("\n").filter(x => x.trim().length > 0);
function generateName() {
  let ifirstName = Math.floor(Math.random() * firstNames.length);
  let ilastName = Math.floor(Math.random() * lastNames.length);
  return firstNames[ifirstName] + " " + lastNames[ilastName];
}
function generateNames(count) {
  let names = new Set();
  for (let i = 0; i < count; i++) {
    names.add(generateName());
  }
  return Array.from(names);
}

},{"url:../assets/place-names.txt":"3igvL","url:../assets/last-names.txt":"7a5yF","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"3igvL":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "place-names.HASH_REF_0c81ee7cfc92232b51ad1a27d5e0ef05.txt"
},{"./bundle-url":"3seVR"}],"3seVR":[function(require,module,exports) {
"use strict";

/* globals document:readonly */
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.


function getOrigin(url) {
  let matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);

  if (!matches) {
    throw new Error('Origin not found');
  }

  return matches[0];
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;
},{}],"7a5yF":[function(require,module,exports) {
module.exports = require('./bundle-url').getBundleURL() + "last-names.HASH_REF_658d07f9ef99c816f8d1378e0b90a456.txt"
},{"./bundle-url":"3seVR"}],"5gA8y":[function(require,module,exports) {
"use strict";

exports.interopDefault = function (a) {
  return a && a.__esModule ? a : {
    default: a
  };
};

exports.defineInteropFlag = function (a) {
  Object.defineProperty(a, '__esModule', {
    value: true
  });
};

exports.exportAll = function (source, dest) {
  Object.keys(source).forEach(function (key) {
    if (key === 'default' || key === '__esModule') {
      return;
    } // Skip duplicate re-exports when they have the same value.


    if (key in dest && dest[key] === source[key]) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function () {
        return source[key];
      }
    });
  });
  return dest;
};

exports.export = function (dest, destName, get) {
  Object.defineProperty(dest, destName, {
    enumerable: true,
    get: get
  });
};
},{}]},["2ReLs"], "2ReLs", "parcelRequiree0dd")

//# sourceMappingURL=submit.HASH_REF_82da8c26ed8368d2ec426855a9c94e90.js.map
